
[tox]
envlist =
    linters
    coverage
#    docs
requires = pip


[testenv]
setenv =
    PYTHONDONTWRITEBYTECODE = 1
    LINT_TARGETS = src tests
    LINT_TARGETS_NOTESTS = src


[testenv:linters]
description = Run all linters.
deps =
    {[testenv:ruff]deps}
commands =
    {[testenv:ruff]commands}


[testenv:ruff]
description = Run Ruff.
deps =
    ruff
skip_install = True
commands =
    ruff format --check {env:LINT_TARGETS}
    ruff check {env:LINT_TARGETS_NOTESTS}


[testenv:unit-tests]
deps =
    {[testenv:runtest]deps}
    pytest
skip_install = True
commands =
    {[testenv:runtest]commands}


[testenv:coverage]
deps =
    {[testenv:unit-tests]deps}
    pytest-cov
    coverage
skip_install = True
commands =
    pytest --cov=src/birdplan {posargs:tests}
    coverage report --show-missing


[testenv:docs]
description = Build HTML documentation.
deps =
    {[testenv:run]deps}
    sphinx
    sphinx-rtd-theme
skip_install = True
commands = sphinx-build -q -W -b html -d {envtmpdir}/doctrees docs docs/build/html


[testenv:serve-docs]
description = Serve HTML documentation.
deps =
    {[testenv:docs]deps}
skip_install = True
commands =
    {[testenv:docs]commands}
    python -m http.server --directory docs/build/html {posargs:8000}


[testenv:cov-html]
description = Generate HTML coverage report.
deps =
    coverage
skip_install = True
commands = coverage html


[testenv:serve-cov]
description = Serve HTML coverage report.
deps =
    {[testenv:cov-html]deps}
skip_install = True
commands =
    {[testenv:cov-html]commands}
    python -m http.server --directory htmlcov {posargs:8100}


[testenv:sec-html]
description = Generate HTML bandidt report.
deps =
    bandit
skip_install = True
commands =
    mkdir -p htmlsec
    bandit --ini tox.ini --number 5 --format html --output htmlsec/index.html --recursive {env:LINT_TARGETS_NOTESTS}


[testenv:serve-sec]
description = Serve HTML security report.
deps =
    {[testenv:sec-html]deps}
skip_install = True
commands =
    {[testenv:sec-html]commands}
    python -m http.server --directory htmlsec {posargs:8200}


[testenv:build]
deps =
    {[testenv:run]deps}
    build
    wheel
    check-wheel-contents
    twine
skip_install = True
commands =
    python -m build --sdist --wheel
    twine check dist/*.tar.gz dist/*.whl
    check-wheel-contents dist/


[testenv:build_flit]
deps =
    {[testenv:run]deps}
    flit
    check-wheel-contents
    twine
skip_install = True
commands =
    flit build --no-setup-py
    twine check dist/*.tar.gz dist/*.whl
    check-wheel-contents dist/


[testenv:publish]
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    PUBLISH_REPOSITORY
setenv =
    TWINE_REPOSITORY_URL = {env:PUBLISH_REPOSITORY:https://upload.pypi.org/legacy/}
deps =
    twine
skip_install = True
commands =
    python -m twine upload --verbose dist/*.whl dist/*.tar.gz


[testenv:runtest]
parallel_show_output = True
description = Run tests in test environment.
passenv =
    PYTHONPATH
deps =
    {[testenv:run]deps}
    git+https://gitlab.oscdev.io/software/nsnetsim.git@master#egg=nsnetsim
    cryptography
    pytest
    pytest-xdist
skip_install = True
commands =
    pytest {posargs:tests}


[testenv:run]
description = Run BirdPlan.
deps =
    git+https://gitlab.oscdev.io/software/birdclient.git@master#egg=birdclient
    click
    jinja2
    PyYAML
    packaging
    ruamel.yaml
    requests
skip_install = True
commands =
    python -m birdplan {posargs}


[bandit]


[flake8]
max_line_length = 132
extend-ignore =
    # black inserts a blank line between function docstring and wrapped function
    # https://github.com/ambv/black/issues/196#issuecomment-392688816
    D202,
    # https://black.readthedocs.io/en/stable/the_black_code_style.html#line-breaks-binary-operators
    W503,
import-order-style = google
application-import-names = birdplan
rst-roles =
    class,
    func,
    ref,
    attr,
    meth,


[pycodestyle]
max-line-length = 132


[pydocstyle]
ignore = D202, D203, D212


[pytest]
addopts = --color yes
