image: idmslinux/rolling

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'


# Stages we need to progress through
stages:
  - validate
  - test
  - prepare_release
  - release
  - deploy


# Run for merge requests and non-protected branches
.rules_for_mrs_tempalate: &rules_for_mrs
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - if: '$CI_COMMIT_BRANCH'


commitlint:
  stage: validate
  image: registry.conarx.tech/containers/commitlint
  script:
    - cd "$CI_PROJECT_DIR"
    - echo "CI_COMMIT_BEFORE_SHA -> $CI_COMMIT_BEFORE_SHA"
    - |
      if [ "$CI_COMMIT_BEFORE_SHA" == "0000000000000000000000000000000000000000" ]; then
        START_COMMIT=HEAD^
      else
        START_COMMIT=$CI_MERGE_REQUEST_DIFF_BASE_SHA
      fi
    - run-commitlint --from "$START_COMMIT" --to HEAD
  <<: *rules_for_mrs


shellcheck:
  stage: validate
  image: registry.conarx.tech/containers/shellcheck
  script:
    - cd "$CI_PROJECT_DIR"
    - run-shellcheck .
  <<: *rules_for_mrs


test_job:
  stage: test
  coverage: '/^TOTAL.+?(\d+\%)$/'
  script:
  # Create environment
  - pacman -Syu --noconfirm
  - pacman -S --noconfirm grep python
  - pacman -S --noconfirm
      git
      python-tox
  - pacman -S --noconfirm
      iproute2
      bird
      exabgp
      bgpq3
  # Run tests
  - contrib/test-environment/runtest $EXTRA_TEST_OPTS
  # Save HTML coverage report
  - tox -e cov-html
  - mkdir public
  - mv htmlcov public/coverage
  # Save coverage report
  artifacts:
    paths:
    - public


prepare_release:
  stage: prepare_release
  rules:
    - if: $CI_COMMIT_TAG
  script:
  - pacman -Syu --noconfirm
  - pacman -S --noconfirm git
  - mkdir build
  # Work out commit range for changelog
  - LAST_TAG=$(git tag --sort -version:refname | head -n2 | tail -n1)
  - if [ -n "$LAST_TAG" ]; then COMMIT_RANGE="$LAST_TAG..$CI_COMMIT_TAG"; else COMMIT_RANGE=""; fi
  # Output description file
  - echo "Automatic release based on tag $CI_COMMIT_TAG" > build/description.txt
  - git log --oneline --decorate --no-merges "$COMMIT_RANGE" >> build/description.txt
  artifacts:
    expire_in: 1 day
    paths:
    - build/


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Release"
  release:
     name: 'Release $CI_COMMIT_TAG'
     description: 'Automatic release based on tag $CI_COMMIT_TAG'
     tag_name: '$CI_COMMIT_TAG'
     ref: '$CI_COMMIT_TAG'


pages:
  stage: deploy
  only:
  - master
  script:
  - echo "Deploying pages..."
  artifacts:
    paths:
    - public

